<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
		layout="absolute" backgroundColor="0xffffff"
		initialize="init();" creationComplete="cc();"
		xmlns:local="*" viewSourceURL="srcview/index.html">
	<mx:Script>
		<![CDATA[
			import com.aaronhardy.cache.ImageCache; 
			import com.aaronhardy.services.ServiceQueue;
			import mx.collections.ArrayCollection;
			
			[Bindable]
			/**
			 * The Yellowstone photos data provider.
			 */
			protected var yellowStonePhotos:ArrayCollection;
			
			[Bindable]
			/**
			 * The Zions photos data provider.
			 */
			protected var zionsPhotos:ArrayCollection;
			
			[Bindable]
			/**
			 * The queue instance to be used throughout the app.
			 */
			protected var queue:ServiceQueue;
			
			[Bindable]
			/**
			 * The cache instance to be used throughout the app.
			 */
			protected var imageCache:ImageCache;
			
			/**
			 * Initializes the queue and cache.
			 */
			protected function init():void
			{
				queue = new ServiceQueue();
				imageCache = new ImageCache();
			}
			
			/**
			 * Sets up data providers
			 */
			protected function cc():void
			{
				const YS_BASE:String = 'http://aaronhardy.com/samples/queuencache/pictures/Yellowstone_medium/';
				const ZIONS_BASE:String = 'http://aaronhardy.com/samples/queuencache/pictures/Zions_medium/';

				yellowStonePhotos = new ArrayCollection();
				zionsPhotos = new ArrayCollection();
				
				for (var i:uint = 1; i <= 30; i++)
				{
					yellowStonePhotos.addItem(YS_BASE + i + '.jpg');
					zionsPhotos.addItem(ZIONS_BASE + i + '.jpg');
				}
			}
			
			/**
			 * Changes the cache size.
			 */
			protected function changeCacheSize():void
			{
				imageCache.maxBytes = uint(cacheSizeInput.text) * 1000000;
			}
			
			/**
			 * Clears the cache.
			 */
			protected function clearCache():void
			{
				imageCache.clear();
			}
			
			/**
			 * Changes the number of executing slots in the queue.
			 */
			protected function changeQueueSlots():void
			{
				queue.maxSimultaneousRequests = uint(queueSlotsInput.text);
			}
			
			/**
			 * Nicely formats the bytes into megabytes.
			 */
			protected function formatBytes(value:uint):String
			{
				return numberFormatter.format(value / 1000000);
			}
			
			/**
			 * Creates the tab navigator.  This is delayed until the user prompts for it because
			 * we want to give the user time to properly set up the test.
			 */
			protected function createTabNavigator():void
			{
				tabNavigator.createComponentsFromDescriptors();
				goButton.parent.removeChild(goButton);
			}
		]]>
	</mx:Script>
	<mx:NumberFormatter id="numberFormatter" precision="2"/>
	<mx:VBox width="450" height="100%" horizontalCenter="0"
			paddingTop="15" paddingBottom="15">
		<mx:HBox>
			<mx:Label text="Use Regular Image Renderer:" fontWeight="bold"/>
			<mx:CheckBox id="regularRendererCheckbox" selected="false"/>
		</mx:HBox>
		<mx:HBox verticalAlign="middle" 
				visible="{!regularRendererCheckbox.selected}"
				includeInLayout="{!regularRendererCheckbox.selected}">
			<mx:Label text="Cache Size:" fontWeight="bold"/>
			<mx:TextInput id="cacheSizeInput" text="150" width="50" restrict="0-9"/>
			<mx:Label text="MB"/>
			<mx:Button label="Commit" click="changeCacheSize();"/>
		</mx:HBox>
		<mx:HBox verticalAlign="middle"
				visible="{!regularRendererCheckbox.selected}"
				includeInLayout="{!regularRendererCheckbox.selected}">
			<mx:Label text="Cache Used:" fontWeight="bold"/>
			<mx:Label text="{formatBytes(imageCache.storedBytes)}/{formatBytes(imageCache.maxBytes)} MB"/>
			<mx:Button label="Clear Cache" click="clearCache();"/>
		</mx:HBox>
		<mx:HBox verticalAlign="middle"
				visible="{!regularRendererCheckbox.selected}"
				includeInLayout="{!regularRendererCheckbox.selected}">
			<mx:Label text="Queue Executing Slots:" fontWeight="bold"/>
			<mx:TextInput id="queueSlotsInput" text="2" width="50" restrict="0-9"/>
			<mx:Button label="Commit" click="changeQueueSlots();"/>
		</mx:HBox>
		<mx:HBox verticalAlign="middle"
				visible="{!regularRendererCheckbox.selected}"
				includeInLayout="{!regularRendererCheckbox.selected}">
			<mx:Label text="Priority Shifting Enabled:" fontWeight="bold"/>
			<mx:CheckBox id="priortyShiftCheckbox" selected="true"/>
		</mx:HBox>
		<mx:Button id="goButton" label="Go!" click="createTabNavigator();"/>
		<mx:TabNavigator id="tabNavigator" width="100%" height="100%" creationPolicy="none">
			<local:PhotoPage 
					label="Zions"
					dataProvider="{zionsPhotos}"
					useRegularImageRenderer="{regularRendererCheckbox.selected}"
					queue="{queue}"
					queueCategory="zions"
					imageCache="{imageCache}"
					priorityShiftingEnabled="{priortyShiftCheckbox.selected}" 
					width="100%" 
					height="100%"/>
			<local:PhotoPage 
					label="Yellowstone"
					dataProvider="{yellowStonePhotos}"
					useRegularImageRenderer="{regularRendererCheckbox.selected}"
					queue="{queue}"
					queueCategory="yellowstone"
					imageCache="{imageCache}" 
					priorityShiftingEnabled="{priortyShiftCheckbox.selected}"
					width="100%" 
					height="100%"/>
			<local:PhotoPage 
					label="Zions Copy"
					dataProvider="{zionsPhotos}"
					useRegularImageRenderer="{regularRendererCheckbox.selected}"
					queue="{queue}"
					queueCategory="zions"
					imageCache="{imageCache}" 
					priorityShiftingEnabled="{priortyShiftCheckbox.selected}"
					width="100%" 
					height="100%"/>
		</mx:TabNavigator>
	</mx:VBox>
</mx:Application>
